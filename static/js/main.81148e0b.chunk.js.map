{"version":3,"sources":["assets/cloudy-sky.jpg","assets/drizzle.jpg","assets/fog.jpg","assets/rainy-day.jpg","assets/snow.jpg","assets/storm.jpg","assets/sunny.jpg","assets/default.jpg","assets/covered.jpg","localization/weather/CurrentWeatherLocal.js","api/Api.js","weather/WeatherComponent.js","weather/CurrentWeather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","local","LocalizedStrings","en","loading","humidity","wind","important","geolocationRequest","north","northEast","east","southEast","south","southWest","west","northwest","station","es","Api","latitude","longitude","language","Axios","get","this","WEATHER","headers","HEADERS","params","appid","units","lat","lon","lang","then","response","data","create","baseURL","WeatherComponent","props","weather","React","useState","image","setImage","useEffect","calculateImage","deg","id","stormImg","drizzleImg","rainyImg","snowImg","fogImg","sunnyImg","cloudyImg","coveredImg","defaultImg","styles","heightSmall","height","heightMedium","temp","fontSize","fontWeight","verticalAlign","middle","capitalize","textTransform","component","background","padding","borderRadius","main","width","align","textAlign","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","style","Card","CardActionArea","CardContent","Grid","container","item","xs","sm","md","xl","direction","justify","alignItems","spacing","Typography","variant","alt","src","icon","parseFloat","toFixed","marginTop","temp_max","temp_min","gutterBottom","description","speed","color","name","LinearProgress","CurrentWeather","setWeather","error","setError","permissionInfo","setPermissionInfo","navigator","geolocation","console","log","permissions","query","result","handlePermissionResult","onchange","getCurrentWeather","getWeather","getLanguage","catch","message","state","getCurrentPosition","position","coords","onClick","Alert","severity","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81148e0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloudy-sky.d56cf3ed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle.c6679dc6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fog.cac8ace4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-day.1e31577d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow.272d8b9d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm.a1438dce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunny.5f43ef67.jpg\";","module.exports = __webpack_public_path__ + \"static/media/default.95dc7bcb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/covered.99c596e5.jpg\";","import LocalizedStrings from 'react-localization';\n\nconst local = new LocalizedStrings({\n  en:{\n\t\tloading : \"Loading...\",\n    humidity:\"Humidity\",\n    wind:\"Wind\",\n    important : \"Important!\",\n    geolocationRequest : \"We need your location to provide you the local weather.\",\n    //cardinals\n    north:\"North\",\n    northEast: \"Northeast\",\n    east: \"East\",\n    southEast: \"Southeast\",\n    south:\"South\",\n    southWest:\"Southwest\",\n    west:\"West\",\n    northwest:\"Northwest\",\n    station:\"Station\"\n  },\n  es: {\n  \tloading : \"Cargando...\",\n    humidity:\"Humedad\",\n    wind:\"Viento\",\n    important : \"¡Importante!\",\n    geolocationRequest : \"Necesitamos su ubicacion para poder brindarle el clima local.\",\n    //cardinals\n    north:\"Norte\",\n    northEast: \"Noreste\",\n    east: \"Este\",\n    southEast: \"Sudeste\",\n    south:\"Sur\",\n    southWest:\"Sudoeste\",\n    west:\"Oeste\",\n    northwest:\"Noroeste\",\n    station:\"Estación\"\n  }\n});\n\nexport default local\n","import Axios from 'axios';\n\nexport default class Api {\n\n\tstatic WEATHER = \"https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather\";\n\n\tstatic HEADERS = {\n\t\t'Access-Control-Allow-Origin':'*',\n\t\t'Access-Control-Allow-Credential':'true',\n\t\t'Access-Control-Allow-Methods': 'GET'\n\t}\n\n\tstatic async getWeather(latitude, longitude, language) {\n\t\treturn await Axios.get(this.WEATHER, {\n\t\t\theaders: this.HEADERS,\n\t\t\tparams: {\n\t\t\t\tappid: \"bb08096af050f2bd4c2b401249b14e27\",\n\t\t\t\tunits: \"metric\",\n\t\t\t\tlat: latitude,\n\t\t\t\tlon: longitude,\n\t\t\t\tlang: language\n\t\t\t}\n\t\t}).then(response => response.data);\n\t}\n\n\n  static instance(latitude, longitude,language) {\n\n\t// const URL_PROD_OW = \"https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather\";\n\tconst URL_PROD_OW = \"https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather\";\n\n    return Axios.create({\n      baseURL: URL_PROD_OW,\n      // timeout: 5000\n\t\t\theaders: {\n\t\t\t\t'Access-Control-Allow-Origin':'*',\n\t\t\t\t'Access-Control-Allow-Credential':'true',\n\t\t\t\t'Access-Control-Allow-Methods': 'GET'\n      },\n\t\t\tparams:{\n\t\t\t\tappid: \"bb08096af050f2bd4c2b401249b14e27\",\n\t\t\t\tunits: \"metric\",\n\t\t\t\tlat: latitude,\n\t\t\t\tlon: longitude,\n\t\t\t\tlang: language\n\t\t\t}\n    });\n  }\n}\n","import React from 'react'\nimport local from \"../localization/weather/CurrentWeatherLocal\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport Grid from \"@material-ui/core/Grid\";\nimport cloudyImg from \"../assets/cloudy-sky.jpg\";\nimport drizzleImg from \"../assets/drizzle.jpg\";\nimport fogImg from \"../assets/fog.jpg\";\nimport rainyImg from \"../assets/rainy-day.jpg\";\nimport snowImg from \"../assets/snow.jpg\";\nimport stormImg from \"../assets/storm.jpg\";\nimport sunnyImg from \"../assets/sunny.jpg\";\nimport defaultImg from \"../assets/default.jpg\";\nimport coveredImg from \"../assets/covered.jpg\";\n\nconst WeatherComponent = (props) => {\n    const weather = props.weather;\n\n    const [image, setImage] = React.useState(null);\n\n    React.useEffect(() => {\n        setImage(calculateImage());\n    },[props.weather])\n\n    const calculateImage = () => {\n        if(!weather) return null;\n        const id = weather.weather[0].id;\n        const code = (''+id)[0];\n\n        switch (code) {\n            case '2': return stormImg;\n            case '3': return drizzleImg;\n            case '5': return rainyImg;\n            case '6': return snowImg;\n            case '7': return fogImg;\n            case '8':\n                if(id === 800 || id === 801) return sunnyImg;\n                if(id === 802 || id === 803) return cloudyImg;\n                return coveredImg;\n            default: return defaultImg;\n        }\n\n    }\n\n    const degreesToCardinal = (deg) => {\n        const cardinals = [\n            local.north,\n            local.northEast,\n            local.east,\n            local.southEast,\n            local.south,\n            local.southWest,\n            local.west,\n            local.northwest,\n            local.north\n        ];\n\n        return cardinals[parseFloat((deg % 360) / 45).toFixed(0)];\n    }\n\n    const styles = {\n        heightSmall: {\n            height: '15px'\n        },\n        heightMedium: {\n            height: '28px'\n        },\n        temp: {\n            fontSize: '42pt',\n            fontWeight: 'bold',\n            verticalAlign: 'middle'\n        },\n        middle: {\n            verticalAlign: 'middle'\n        },\n        capitalize: {\n            textTransform: 'capitalize',\n            fontWeight: 'bold'\n        },\n        component: {\n            background: 'rgba(245,245,245, .75)',\n            padding: '60px 0 60px 0',\n            borderRadius : '5px'\n        },\n        main: {\n            width: '100%',\n            height: '100%',\n            align: 'center',\n            textAlign: 'center',\n            backgroundImage: `url(${image})`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundSize: 'cover',\n        },\n    }\n\n    return (\n        <div style={styles.main}>\n            {weather ? <Card style={styles.main}>\n                <CardActionArea style={{height: '100%'}}>\n                    <CardContent>\n                        <Grid container>\n                            <Grid item xs={1} sm={3} md={4} xl={5}/>\n                            <Grid item xs={10} sm={6} md={4} xl={2}>\n                                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" style={styles.component}>\n                                    <Grid item>\n                                        <Grid container spacing={2}>\n                                            <Grid item>\n                                                <Typography variant='h4' style={styles.temp}>\n                                                    <img alt=\"\" src={`https://openweathermap.org/img/w/${weather.weather[0].icon}.png`}/>\n                                                    {(parseFloat(weather.main.temp).toFixed(0))+\"°C\"}\n                                                </Typography>\n                                            </Grid>\n                                            <Grid item>\n                                                <Grid container direction=\"column\" style={{marginTop: '10px'}}>\n                                                    <Grid item style={{fontSize: '16pt'}}>\n                                                        {(parseFloat(weather.main.temp_max).toFixed(0))+'°'}\n                                                    </Grid>\n                                                    <Grid item style={{fontSize: '16pt'}}>\n                                                        {(parseFloat(weather.main.temp_min).toFixed(0))+'°'}\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n\n                                    <Grid item>\n                                        <Typography variant=\"h6\" gutterBottom style={styles.capitalize}>\n                                            {weather.weather[0].description}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Typography variant=\"body1\" gutterBottom>\n                                            {local.humidity}: <strong>{parseFloat(weather.main.humidity).toFixed(0)+\"%\"}</strong>\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Typography variant=\"body1\" gutterBottom>\n                                            {local.wind}: <strong>{parseFloat(weather.wind.speed).toFixed(0)+\" km/h \"+degreesToCardinal(weather.wind.deg)}</strong>\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Typography color=\"textSecondary\" gutterBottom>{weather.name}</Typography>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid item xs={1} sm={3} md={4} xl={5}/>\n                        </Grid>\n\n                    </CardContent>\n                </CardActionArea>\n            </Card> : <LinearProgress />}\n        </div>\n    )\n}\n\n\n\nexport default WeatherComponent;\n","import React from 'react'\nimport local from \"../localization/weather/CurrentWeatherLocal\";\nimport Api from \"../api/Api\";\nimport WeatherComponent from \"./WeatherComponent\";\nimport Alert from \"@material-ui/lab/Alert\";\n\n\nconst CurrentWeather = (props) => {\n\n    const [weather, setWeather] = React.useState(null);\n    const [error, setError] = React.useState(null);\n    const [permissionInfo, setPermissionInfo] = React.useState(false);\n\n    const handlePermission = () => {\n        if(!navigator.geolocation) console.log(\"Geolocation is not available\");\n        navigator.permissions.query({name:'geolocation'}).then(result => {\n            handlePermissionResult(result);\n            result.onchange = () => handlePermissionResult(result);\n        });\n    }\n\n    const populate = () => {\n        if(!!navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                //ON_SUCCESS\n                (position) =>\n                    getCurrentWeather(position.coords.latitude, position.coords.longitude)\n                )\n        }\n        else {\n            console.log(\"Geolocation is not available\");\n        }\n    }\n\n    React.useEffect(() => {\n        handlePermission();\n        // populate();\n    }, []);\n\n\n\n    const getCurrentWeather = (lat, lon) => {\n        Api.getWeather(lat, lon, local.getLanguage())\n            .then((weather) => setWeather(weather))\n            .catch((error) => {\n                setError(error.message);\n                console.log(error);\n            });\n    }\n\n\n\n    const handlePermissionResult = (result) => {\n        switch (result.state) {\n            case \"denied\":\n                setPermissionInfo(false);\n                setError(local.geolocationRequest);\n                break;\n            case \"granted\":\n                setPermissionInfo(false);\n                navigator.geolocation.getCurrentPosition(\n                    (position) => getCurrentWeather(position.coords.latitude, position.coords.longitude)\n                );\n                break;\n            case \"prompt\":\n                setPermissionInfo(true);\n                break;\n            default: break;\n        }\n    }\n\n    return (\n        <div onClick={populate} style={{height: '100%', width: '100%'}}>\n            {error && <Alert severity=\"error\">{error}</Alert>}\n            {permissionInfo && !error && <Alert severity=\"info\"><strong>{local.important}</strong>{\" \"+local.geolocationRequest}</Alert>}\n            <WeatherComponent weather={weather}/>\n        </div>\n    )\n}\n\n\n\nexport default CurrentWeather;\n","import React from 'react';\nimport './App.css';\nimport CurrentWeather from \"./weather/CurrentWeather\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CurrentWeather/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}