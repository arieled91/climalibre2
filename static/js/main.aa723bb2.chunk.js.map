{"version":3,"sources":["assets/cloudy-sky-min.jpg","assets/cloudy-sky.jpg","assets/drizzle-min.jpg","assets/drizzle-night-min.jpg","assets/fog-min.jpg","assets/rainy-day-min.jpg","assets/snow-min.jpg","assets/storm-min.jpg","assets/sunny-min.jpg","assets/covered-min.jpg","assets/clear-sky-night-min.jpg","assets/cloudy-sky-night-min.jpg","assets/fog-night-min.jpg","assets/snow-night-min.jpg","assets/covered-night-min.jpg","assets/rainy-night-min.jpg","assets/drizzle.jpg","assets/drizzle-night.jpg","assets/fog.jpg","assets/rainy-day.jpg","assets/snow.jpg","assets/storm.jpg","assets/sunny.jpg","assets/covered.jpg","assets/clear-sky-night.jpg","assets/cloudy-sky-night.jpg","assets/fog-night.jpg","assets/snow-night.jpg","assets/covered-night.jpg","assets/rainy-night.jpg","localization/weather/WeatherLocal.js","api/Api.js","weather/Utils.js","weather/backgroundImage/BackgroundImage.js","weather/weatherComponent/weatherIcon/WeatherIcon.js","weather/weatherComponent/todayForecast/TodayForecast.js","weather/weatherComponent/WeatherComponent.js","weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","message","LocalizedStrings","en","loading","humidity","feelsLike","wind","important","geolocationRequest","geolocationDisabled","north","northEast","east","southEast","south","southWest","west","northwest","station","noPrecipitations","precipitations","description","time","es","Api","Axios","get","this","IP_LOCATION","then","response","data","zipCode","countryCode","language","WEATHER","params","baseParams","q","lang","latitude","longitude","lat","lon","FORECAST","OWM_API_ID","URL","appid","units","fix","float","digits","parseFloat","toFixed","getLocalTime","stringTime","Date","toLocaleTimeString","hour","minute","hour12","charAt","substr","isDayTime","weather","sunrise","sys","sunset","now","getTime","BackgroundImage","props","React","useState","min","full","image","setImage","imageLoaded","setImageLoaded","isDayTimeWeather","useCallback","calculateImage","id","code","day","stormImg","stormImgMin","drizzleImg","drizzleImgMin","drizzleNightImg","drizzleNightImgMin","rainyImg","rainyImgMin","rainyNightImg","rainyNightImgMin","snowImg","snowImgMin","snowNightImg","snowNightImgMin","fogImg","fogImgMin","fogNightImg","fogNightImgMin","sunnyImg","sunnyImgMin","clearSkyNightImg","clearSkyNightImgMin","cloudyImg","cloudyImgMin","cloudySkyNightImg","cloudySkyNightImgMin","coveredImg","coveredImgMin","coveredNightImg","coveredNightImgMin","useEffect","className","src","alt","onLoad","WeatherIcon","weatherCode","icon","setIcon","undefined","toString","includes","TodayForecast","forecasts","map","forecast","key","dt","style","display","textAlign","size","color","main","temp","fontSize","WeatherComponent","todayForecast","setTodayForecast","nextRain","setNextRain","forecastForToday","list","filter","w","hours24","setHours","getHours","a","b","tomorrowMorning","setDate","getDate","tomorrow","find","f","deg","Grid","container","direction","justify","alignItems","item","Typography","variant","name","gutterBottom","marginBottom","spacing","verticalAlign","temp_max","temp_min","feels_like","speed","Weather","setWeather","setForecast","error","setError","permission","setPermission","Permission","populateByLocation","navigator","geolocation","getCurrentPosition","position","getWeatherByCoords","coords","permissions","query","result","state","onchange","populateByCity","getIpLocation","location","getWeatherByCity","city","country_code","catch","e","console","log","populate","getLanguage","getForecastByCoords","onFocus","window","addEventListener","removeEventListener","height","width","Alert","severity","LinearProgress","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa723bb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloudy-sky-min.1effaf46.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-sky.d56cf3ed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle-min.d9ca9dd9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle-night-min.382ad09b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fog-min.585687a6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-day-min.0408d453.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow-min.813d8ba8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm-min.88eb52fb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunny-min.a647c593.jpg\";","module.exports = __webpack_public_path__ + \"static/media/covered-min.20c0d102.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clear-sky-night-min.38b1b49c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-sky-night-min.769c0453.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fog-night-min.e6e165b4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow-night-min.129bfaad.jpg\";","module.exports = __webpack_public_path__ + \"static/media/covered-night-min.f0782ad0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-night-min.927a1ae9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle.c6679dc6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle-night.0f053312.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fog.cac8ace4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-day.1e31577d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow.272d8b9d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm.a1438dce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunny.5f43ef67.jpg\";","module.exports = __webpack_public_path__ + \"static/media/covered.99c596e5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clear-sky-night.f323ee0a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-sky-night.84d67e51.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fog-night.b721e3af.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow-night.acc734b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/covered-night.a51160fd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-night.26eee4b5.jpg\";","import LocalizedStrings from 'react-localization';\n\nconst message = new LocalizedStrings({\n  en:{\n    loading : \"Loading...\",\n    humidity: \"Humidity\",\n    feelsLike: \"Feels Like\",\n    wind:\"Wind\",\n    important : \"Important!\",\n    geolocationRequest : \"Grant location permission in your device to continue\",\n    geolocationDisabled : \"Geolocation is disabled in your device\",\n    //cardinals\n    north:\"North\",\n    northEast: \"Northeast\",\n    east: \"East\",\n    southEast: \"Southeast\",\n    south:\"South\",\n    southWest:\"Southwest\",\n    west:\"West\",\n    northwest:\"Northwest\",\n    station:\"Station\",\n    noPrecipitations: \"No precipitation expected\",\n    precipitations: (description, time) => `Expected ${description} at ${time}`\n  },\n  es: {\n  \tloading : \"Cargando...\",\n    humidity:\"Humedad\",\n    feelsLike:\"Sensación térmica\",\n    wind:\"Viento\",\n    important : \"¡Importante!\",\n    geolocationRequest : \"Para continuar conceda permisos de ubicación.\",\n    geolocationDisabled : \"La geolocalización se encuentra deshabilitada en su dispositivo\",\n    //cardinals\n    north:\"Norte\",\n    northEast: \"Noreste\",\n    east: \"Este\",\n    southEast: \"Sudeste\",\n    south:\"Sur\",\n    southWest:\"Sudoeste\",\n    west:\"Oeste\",\n    northwest:\"Noroeste\",\n    station:\"Estación\",\n    noPrecipitations: \"No se esperan precipitaciones\",\n    precipitations: (description, time) => `Se espera ${description} a las ${time}`\n  }\n});\n\nexport default message\n","import Axios from 'axios';\n\nexport default class Api {\n\n\tstatic OWM_API_ID = \"bb08096af050f2bd4c2b401249b14e27\";\n\tstatic URL = \"https://api.openweathermap.org/data/2.5\";\n\tstatic WEATHER = this.URL+\"/weather\";\n\tstatic FORECAST = this.URL+\"/forecast\";\n\tstatic IP_LOCATION = \"https://ipapi.co/json\"\n\n\tstatic baseParams = {\n\t\tappid: this.OWM_API_ID,\n\t\tunits: \"metric\",\n\t}\n\n\tstatic async getIpLocation() {\n\t\treturn await Axios.get(this.IP_LOCATION)\n\t\t\t.then(response => response.data);\n\t}\n\n\tstatic async getWeatherByCity(zipCode, countryCode, language) {\n\t\treturn await Axios.get(this.WEATHER, {\n\t\t\tparams: {\n\t\t\t\t...this.baseParams,\n\t\t\t\tq: `${zipCode},${countryCode}`,\n\t\t\t\tlang: language\n\t\t\t}\n\t\t}).then(response => response.data);\n\t}\n\n\tstatic async getWeatherByCoords(latitude, longitude, language) {\n\t\treturn await Axios.get(this.WEATHER, {\n\t\t\tparams: {\n\t\t\t\t...this.baseParams,\n\t\t\t\tlat: latitude,\n\t\t\t\tlon: longitude,\n\t\t\t\tlang: language\n\t\t\t}\n\t\t}).then(response => response.data);\n\t}\n\n\tstatic async getForecastByCity(zipCode, countryCode, language) {\n\t\treturn await Axios.get(this.FORECAST, {\n\t\t\tparams: {\n\t\t\t\t...this.baseParams,\n\t\t\t\tq: `${zipCode},${countryCode}`,\n\t\t\t\tlang: language\n\t\t\t}\n\t\t}).then(response => response.data);\n\t}\n\n\tstatic async getForecastByCoords(latitude, longitude, language) {\n\t\treturn await Axios.get(this.FORECAST, {\n\t\t\tparams: {\n\t\t\t\t...this.baseParams,\n\t\t\t\tlat: latitude,\n\t\t\t\tlon: longitude,\n\t\t\t\tlang: language\n\t\t\t}\n\t\t}).then(response => response.data);\n\t}\n}\n","import message from \"../localization/weather/WeatherLocal\";\n\nexport const fix = (float, digits = 0) => {\n    return parseFloat(float).toFixed(digits);\n}\n\nexport const getLocalTime = (time) => {\n    const stringTime = new Date(time).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit', hour12: false});\n    return stringTime.charAt(0) === '0' ? stringTime.substr(1) : stringTime;\n}\n\nexport const degreesToCardinal = (deg) => {\n    const cardinals = [\n        message.north,\n        message.northEast,\n        message.east,\n        message.southEast,\n        message.south,\n        message.southWest,\n        message.west,\n        message.northwest,\n        message.north\n    ];\n\n    return cardinals[parseFloat((deg % 360) / 45).toFixed(0)];\n}\n\nexport const isDayTime = (weather) => {\n    const sunrise = weather.sys.sunrise * 1000;\n    const sunset = weather.sys.sunset * 1000;\n    const now = new Date().getTime();\n    return now > sunrise && now < sunset;\n}\n\nexport const min = (a, b) => {\n    return a <= b ? a : b\n}\n","import React from 'react'\n\nimport cloudyImgMin from \"../../assets/cloudy-sky-min.jpg\";\nimport drizzleImgMin from \"../../assets/drizzle-min.jpg\";\nimport drizzleNightImgMin from \"../../assets/drizzle-night-min.jpg\";\nimport fogImgMin from \"../../assets/fog-min.jpg\";\nimport rainyImgMin from \"../../assets/rainy-day-min.jpg\";\nimport snowImgMin from \"../../assets/snow-min.jpg\";\nimport stormImgMin from \"../../assets/storm-min.jpg\";\nimport sunnyImgMin from \"../../assets/sunny-min.jpg\";\nimport coveredImgMin from \"../../assets/covered-min.jpg\";\nimport clearSkyNightImgMin from \"../../assets/clear-sky-night-min.jpg\";\nimport cloudySkyNightImgMin from \"../../assets/cloudy-sky-night-min.jpg\";\nimport fogNightImgMin from \"../../assets/fog-night-min.jpg\";\nimport snowNightImgMin from \"../../assets/snow-night-min.jpg\";\nimport coveredNightImgMin from \"../../assets/covered-night-min.jpg\";\nimport rainyNightImgMin from \"../../assets/rainy-night-min.jpg\";\nimport cloudyImg from \"../../assets/cloudy-sky.jpg\";\nimport drizzleImg from \"../../assets/drizzle.jpg\";\nimport drizzleNightImg from \"../../assets/drizzle-night.jpg\";\nimport fogImg from \"../../assets/fog.jpg\";\nimport rainyImg from \"../../assets/rainy-day.jpg\";\nimport snowImg from \"../../assets/snow.jpg\";\nimport stormImg from \"../../assets/storm.jpg\";\nimport sunnyImg from \"../../assets/sunny.jpg\";\nimport coveredImg from \"../../assets/covered.jpg\";\nimport clearSkyNightImg from \"../../assets/clear-sky-night.jpg\";\nimport cloudySkyNightImg from \"../../assets/cloudy-sky-night.jpg\";\nimport fogNightImg from \"../../assets/fog-night.jpg\";\nimport snowNightImg from \"../../assets/snow-night.jpg\";\nimport coveredNightImg from \"../../assets/covered-night.jpg\";\nimport rainyNightImg from \"../../assets/rainy-night.jpg\";\n\nimport \"./BackgroundImage.css\"\nimport {isDayTime} from \"../Utils\";\n\nconst BackgroundImage = ({weather, ...props}) => {\n\n    const [image, setImage] = React.useState({min: '', full: ''});\n    const [imageLoaded, setImageLoaded] = React.useState(false);\n\n    const isDayTimeWeather = React.useCallback(() => {\n        return isDayTime(weather)\n    }, [weather])\n\n    const calculateImage = React.useCallback(() => {\n        if (!weather) return null;\n        const id = weather.weather[0].id;\n        const code = ('' + id)[0];\n        const day = isDayTimeWeather();\n\n        switch (code) {\n            case '2':\n                return {full: stormImg, min: stormImgMin};\n            case '3':\n                return day ? {full: drizzleImg, min: drizzleImgMin} : {full: drizzleNightImg, min: drizzleNightImgMin};\n            case '5':\n                return day ? {full: rainyImg, min: rainyImgMin} : {full: rainyNightImg, min: rainyNightImgMin};\n            case '6':\n                return day ? {full: snowImg, min: snowImgMin} : {full: snowNightImg, min: snowNightImgMin};\n            case '7':\n                return day ? {full: fogImg, min: fogImgMin} : {full: fogNightImg, min: fogNightImgMin};\n            case '8':\n                if (id === 800 || id === 801) return day ? {full: sunnyImg, min: sunnyImgMin} : {\n                    full: clearSkyNightImg,\n                    min: clearSkyNightImgMin\n                };\n                if (id === 802 || id === 803) return day ? {\n                    full: cloudyImg,\n                    min: cloudyImgMin\n                } : {full: cloudySkyNightImg, min: cloudySkyNightImgMin};\n                return day ? {full: coveredImg, min: coveredImgMin} : {full: coveredNightImg, min: coveredNightImgMin};\n            default:\n                return {full: cloudyImg, min: cloudyImgMin};\n        }\n\n    }, [isDayTimeWeather, weather])\n\n\n    React.useEffect(() => {\n        setImage(calculateImage());\n    }, [calculateImage, props.weather])\n\n    return (\n        <div>\n            {!imageLoaded && <img className=\"image thumb\" src={image.min} alt=''/>}\n            <img className=\"image full\" src={image.full} alt='' onLoad={() => setImageLoaded(true)}/>\n        </div>\n    )\n\n}\n\nexport default BackgroundImage;\n","import React, {Fragment} from 'react'\nimport ReactAnimatedWeather from 'react-animated-weather';\n\nconst WeatherIcon = ({isDayTime = true, weatherCode, ...props}) => {\n\n    const [icon, setIcon] = React.useState(null);\n\n    React.useEffect(() => {\n        if(weatherCode !== null && weatherCode !== undefined) {\n            const id = weatherCode.toString()[0];\n\n            switch (id) {\n                case '2':\n                case '5':\n                case '3':\n                    setIcon('RAIN')\n                    break;\n                case '6':\n                    if ([612, 613, 615].includes(weatherCode)) setIcon('SLEET')\n                    else setIcon('SNOW');\n                    break;\n                case '7':\n                    if ([771, 781].includes(weatherCode)) setIcon('WIND');\n                    else setIcon('FOG');\n                    break;\n                case '8':\n                    if ([800, 801].includes(weatherCode)) {\n                        if (isDayTime) setIcon('CLEAR_DAY')\n                        else setIcon('CLEAR_NIGHT');\n                    }\n                    if ([802, 803].includes(weatherCode)) {\n                        if (isDayTime) setIcon('PARTLY_CLOUDY_DAY')\n                        else setIcon('PARTLY_CLOUDY_NIGHT');\n                    }\n                    if (weatherCode === 804) setIcon('CLOUDY');\n                    break;\n\n                default:\n                    setIcon('PARTLY_CLOUDY_DAY')\n            }\n        }\n\n    }, [weatherCode, isDayTime])\n\n    return (\n        <Fragment>\n            {icon && <ReactAnimatedWeather id=\"canvas\"\n                icon={icon}\n                {...props}\n            />}\n        </Fragment>\n    )\n}\n\nexport default WeatherIcon;\n","import React, {Fragment} from 'react'\nimport {fix, getLocalTime, isDayTime} from \"../../Utils\";\n\nimport \"./TodayForecast.css\"\nimport WeatherIcon from \"../weatherIcon/WeatherIcon\";\n\nconst TodayForecast = ({weather, forecasts, ...props}) => {\n\n    return (\n        <div className=\"today-forecast\">\n            {forecasts.map(forecast => (\n                <Fragment  key={forecast.dt}>\n                    <div className=\"forecast-content\">\n                        <div style={{display:'flex', textAlign: 'center'}}>\n                            <WeatherIcon\n                                isDayTime={isDayTime(weather)}\n                                weatherCode={forecast.weather[0].id}\n                                size={30}\n                                color=\"white\"\n                            />\n                            <span className=\"temp\"><strong>{fix(forecast.main.temp) + '°'}</strong></span>\n                        </div>\n                        <div>\n                            <strong style={{fontSize: '9pt'}}>{getLocalTime(forecast.dt * 1000)}</strong>\n                        </div>\n                    </div>\n                </Fragment>\n            ))}\n        </div>\n    )\n}\n\nexport default TodayForecast;\n","import React, {Fragment} from 'react'\nimport message from \"../../localization/weather/WeatherLocal\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport './WeatherComponent.css';\nimport BackgroundImage from \"../backgroundImage/BackgroundImage\";\nimport {degreesToCardinal, fix, getLocalTime, isDayTime, min} from \"../Utils\";\nimport TodayForecast from \"./todayForecast/TodayForecast\";\nimport WeatherIcon from \"./weatherIcon/WeatherIcon\";\n\nconst WeatherComponent = ({weather, forecast}) => {\n\n    const [todayForecast, setTodayForecast] = React.useState([]);\n    const [nextRain, setNextRain] = React.useState(null);\n\n    const tomorrow = () => {\n        let hours24 = new Date();\n        hours24.setHours(hours24.getHours()+24);\n\n        let tomorrowMorning = new Date()\n        tomorrowMorning.setHours(7, 0, 0, 0);\n        tomorrowMorning.setDate(tomorrowMorning.getDate() + 1);\n\n        return min(hours24, tomorrowMorning);\n    }\n\n    React.useEffect(() => {\n        if (forecast) {\n            const forecastForToday = forecast.list.filter(w => w.dt * 1000 < tomorrow());\n            setTodayForecast(forecastForToday);\n            setNextRain(forecastForToday.find(f => f.weather[0].main === 'Rain'));\n        }\n    }, [forecast])\n\n    const styles = {\n        heightSmall: {\n            height: '15px'\n        },\n        heightMedium: {\n            height: '28px'\n        },\n        temp: {\n            fontSize: '55pt',\n            verticalAlign: 'middle'\n        },\n        middle: {\n            verticalAlign: 'middle'\n        }\n    }\n\n    return (\n        <Fragment>\n            <BackgroundImage weather={weather}/>\n            <div className=\"weather-component main-component\">\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" className=\"fullHeight\">\n                    <Grid item>\n                        <Typography variant=\"caption\" style={{\n                            fontSize: '10pt',\n                            color: 'rgba(255,255,255,0.69)'\n                        }}>{weather.name}</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"h5\" gutterBottom className=\"capitalize\" style={{marginBottom: '-5px'}}>\n                            <b>{weather.weather[0].description}</b>\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n                            <Grid item>\n                                <Typography variant='h4' style={styles.temp}>\n                                    {/*<img alt=\"\" src={`https://openweathermap.org/img/w/${weather.weather[0].icon}.png`}/>*/}\n                                    <WeatherIcon\n                                        isDayTime={isDayTime(weather)}\n                                        weatherCode={weather.weather[0].id}\n                                        color=\"white\"\n                                    />\n                                    {fix(weather.main.temp) + \"°C\"}\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n                                    <Grid item style={{fontSize: '20pt'}}>\n                                        {fix(weather.main.temp_max) + '°'}\n                                    </Grid>\n                                    <Grid item style={{fontSize: '20pt'}}>\n                                        {fix(weather.main.temp_min) + '°'}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Typography variant=\"body1\" gutterBottom>\n                            {message.feelsLike}: <strong>{fix(weather.main.feels_like) + \"º\"}</strong>\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"body1\" gutterBottom>\n                            {message.humidity}: <strong>{fix(weather.main.humidity) + \"%\"}</strong>\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"body1\" gutterBottom>\n                            {message.wind}: <strong>{fix(weather.wind.speed) + \" km/h \" + degreesToCardinal(weather.wind.deg)}</strong>\n                        </Typography>\n                    </Grid>\n                    {weather.weather[0].main !== 'Rain' && <Grid item>\n                        <Typography variant=\"body1\" gutterBottom>\n                            <b>{nextRain ? message.precipitations(nextRain.weather[0].description, getLocalTime(nextRain.dt * 1000)) : message.noPrecipitations}</b>\n                        </Typography>\n                    </Grid>}\n                </Grid>\n                <div className=\"hide-scrollbar forecast-container\">\n                    <TodayForecast weather={weather} forecasts={todayForecast}/>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\n\nexport default WeatherComponent;\n","import React from 'react'\nimport message from \"../localization/weather/WeatherLocal\";\nimport Api from \"../api/Api\";\nimport WeatherComponent from \"./weatherComponent/WeatherComponent\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nconst Weather = () => {\n\n    const [weather, setWeather] = React.useState(null);\n    const [forecast, setForecast] = React.useState(null);\n    const [error, setError] = React.useState(null);\n    const [permission, setPermission] = React.useState('');\n\n    const Permission = {\n        PROMPT: 'prompt',\n        DENIED: 'denied',\n        GRANTED: 'granted'\n    }\n\n    const handlePermission = () => {\n        navigator.permissions.query({name:'geolocation'}).then(result => {\n            setPermission(result.state);\n            result.onchange = () => setPermission(result.state);\n        });\n    }\n\n    const populateByLocation = React.useCallback(() => {\n        if(!!(navigator.geolocation)) {\n            navigator.geolocation.getCurrentPosition((position) =>\n                getWeatherByCoords(position.coords.latitude, position.coords.longitude))\n        }\n    }, []);\n\n    React.useEffect(() => {\n        handlePermission();\n    }, []);\n\n    const populateByCity = React.useCallback(() => {\n        Api.getIpLocation().then(location => {\n            getWeatherByCity(location.city, location.country_code)\n        }).catch(e => {\n            if(permission !== Permission.PROMPT) {\n                setError(message.geolocationDisabled);\n                console.log(e);\n            }\n        });\n    }, [permission, Permission.PROMPT]);\n\n    const populate = React.useCallback(() => {\n        setError(null);\n\n        populateByLocation();\n\n        if(permission === Permission.DENIED || permission === Permission.PROMPT || !navigator.geolocation){\n            populateByCity();\n        }\n    }, [populateByLocation, populateByCity, permission, Permission.DENIED, Permission.PROMPT]);\n\n    React.useEffect(() => {\n        if(permission!=='') populate();\n    }, [populate, permission]);\n\n\n\n    const getWeatherByCoords = (lat, lon) => {\n        Api.getWeatherByCoords(lat, lon, message.getLanguage())\n            .then((weather) => setWeather(weather))\n            .catch((error) => {\n                setError(error.message);\n                console.log(error);\n            });\n\n        Api.getForecastByCoords(lat, lon, message.getLanguage())\n            .then((forecast) => {\n                setForecast(forecast);\n            })\n            .catch((error) => {\n                setError(error.message);\n                console.log(error);\n            });\n    }\n\n    const getWeatherByCity = (city, countryCode) => {\n        Api.getWeatherByCity(city, countryCode, message.getLanguage())\n            .then((weather) => setWeather(weather))\n            .catch((error) => {\n                setError(error.message);\n                console.log(error);\n            });\n    }\n\n\n    const onFocus = () => {\n        populate();\n    };\n\n    React.useEffect(() => {\n        window.addEventListener('focus', onFocus);\n\n        return () => {\n            window.removeEventListener('focus', onFocus);\n        };\n    });\n\n    return (\n        <div style={{height: '100%', width: '100%'}}>\n            {error && <Alert severity=\"error\">{error}</Alert>}\n            {!weather && permission === Permission.PROMPT && <Alert severity=\"info\"><strong>{message.important}</strong>{\" \"+message.geolocationRequest}</Alert>}\n            {weather ?\n                <WeatherComponent weather={weather} forecast={forecast}/>\n                : permission !== Permission.DENIED && <LinearProgress />}\n        </div>\n    )\n}\n\nexport default Weather;\n","import React from 'react';\nimport './App.css';\nimport Weather from \"./weather/Weather\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}