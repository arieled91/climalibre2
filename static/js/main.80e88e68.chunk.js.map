{"version":3,"sources":["assets/cloudy-sky.jpg","assets/drizzle.jpg","assets/fog.jpg","assets/rainy-day.jpg","assets/snow.jpg","assets/storm.jpg","assets/sunny.jpg","assets/default.jpg","assets/covered.jpg","localization/weather/CurrentWeatherLocal.js","api/Api.js","weather/WeatherComponent.js","weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","message","LocalizedStrings","en","loading","humidity","wind","important","geolocationRequest","geolocationDisabled","north","northEast","east","southEast","south","southWest","west","northwest","station","es","Api","Axios","get","this","IP_LOCATION","then","response","data","zipCode","countryCode","language","WEATHER","params","appid","OWM_API_ID","units","q","lang","latitude","longitude","lat","lon","WeatherComponent","props","weather","React","useState","image","setImage","useEffect","calculateImage","deg","id","stormImg","drizzleImg","rainyImg","snowImg","fogImg","sunnyImg","cloudyImg","coveredImg","defaultImg","styles","heightSmall","height","heightMedium","temp","fontSize","fontWeight","verticalAlign","middle","capitalize","textTransform","component","background","padding","borderRadius","main","width","align","textAlign","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","fullHeight","style","Card","CardContent","Grid","container","direction","justify","alignItems","item","xs","sm","md","xl","CardActionArea","onClick","clicked","spacing","Typography","variant","alt","src","icon","parseFloat","toFixed","marginTop","temp_max","temp_min","gutterBottom","description","speed","color","name","Weather","setWeather","error","setError","permission","setPermission","Permission","navigator","permissions","query","result","state","onchange","populate","geolocation","getCurrentPosition","position","getWeatherByCoords","coords","getIpLocation","location","getWeatherByCity","city","country_code","catch","e","getLanguage","console","log","Alert","severity","LinearProgress","App","className","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80e88e68.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloudy-sky.d56cf3ed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle.c6679dc6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fog.cac8ace4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-day.1e31577d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow.272d8b9d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm.a1438dce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunny.5f43ef67.jpg\";","module.exports = __webpack_public_path__ + \"static/media/default.95dc7bcb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/covered.99c596e5.jpg\";","import LocalizedStrings from 'react-localization';\n\nconst message = new LocalizedStrings({\n  en:{\n\t\tloading : \"Loading...\",\n    humidity:\"Humidity\",\n    wind:\"Wind\",\n    important : \"Important!\",\n    geolocationRequest : \"Grant location permission in your device to continue\",\n    geolocationDisabled : \"Geolocation is disabled in your device\",\n    //cardinals\n    north:\"North\",\n    northEast: \"Northeast\",\n    east: \"East\",\n    southEast: \"Southeast\",\n    south:\"South\",\n    southWest:\"Southwest\",\n    west:\"West\",\n    northwest:\"Northwest\",\n    station:\"Station\"\n  },\n  es: {\n  \tloading : \"Cargando...\",\n    humidity:\"Humedad\",\n    wind:\"Viento\",\n    important : \"¡Importante!\",\n    geolocationRequest : \"Para continuar conceda permisos de ubicación.\",\n    geolocationDisabled : \"La geolocalización se encuentra deshabilitada en su dispositivo\",\n    //cardinals\n    north:\"Norte\",\n    northEast: \"Noreste\",\n    east: \"Este\",\n    southEast: \"Sudeste\",\n    south:\"Sur\",\n    southWest:\"Sudoeste\",\n    west:\"Oeste\",\n    northwest:\"Noroeste\",\n    station:\"Estación\"\n  }\n});\n\nexport default message\n","import Axios from 'axios';\n\nexport default class Api {\n\n\tstatic OWM_API_ID = \"bb08096af050f2bd4c2b401249b14e27\";\n\tstatic WEATHER = \"https://api.openweathermap.org/data/2.5/weather\";\n\tstatic IP_LOCATION = \"https://ipapi.co/json\"\n\n\tstatic async getIpLocation() {\n\t\treturn await Axios.get(this.IP_LOCATION)\n\t\t\t.then(response => response.data);\n\t}\n\n\tstatic async getWeatherByCity(zipCode, countryCode, language) {\n\t\treturn await Axios.get(this.WEATHER, {\n\t\t\tparams: {\n\t\t\t\tappid: this.OWM_API_ID,\n\t\t\t\tunits: \"metric\",\n\t\t\t\tq: `${zipCode},${countryCode}`,\n\t\t\t\tlang: language\n\t\t\t}\n\t\t}).then(response => response.data);\n\t}\n\n\tstatic async getWeatherByCoords(latitude, longitude, language) {\n\t\treturn await Axios.get(this.WEATHER, {\n\t\t\tparams: {\n\t\t\t\tappid: this.OWM_API_ID,\n\t\t\t\tunits: \"metric\",\n\t\t\t\tlat: latitude,\n\t\t\t\tlon: longitude,\n\t\t\t\tlang: language\n\t\t\t}\n\t\t}).then(response => response.data);\n\t}\n}\n","import React from 'react'\nimport message from \"../localization/weather/CurrentWeatherLocal\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport Grid from \"@material-ui/core/Grid\";\nimport cloudyImg from \"./../assets/cloudy-sky.jpg\";\nimport drizzleImg from \"./../assets/drizzle.jpg\";\nimport fogImg from \"./../assets/fog.jpg\";\nimport rainyImg from \"./../assets/rainy-day.jpg\";\nimport snowImg from \"./../assets/snow.jpg\";\nimport stormImg from \"./../assets/storm.jpg\";\nimport sunnyImg from \".././assets/sunny.jpg\";\nimport defaultImg from \"./../assets/default.jpg\";\nimport coveredImg from \"./../assets/covered.jpg\";\n\nconst WeatherComponent = (props) => {\n    const weather = props.weather;\n\n    const [image, setImage] = React.useState('');\n\n    React.useEffect(() => {\n        setImage(calculateImage());\n    },[props.weather])\n\n    const calculateImage = () => {\n        if(!weather) return null;\n        const id = weather.weather[0].id;\n        const code = (''+id)[0];\n\n        switch (code) {\n            case '2': return stormImg;\n            case '3': return drizzleImg;\n            case '5': return rainyImg;\n            case '6': return snowImg;\n            case '7': return fogImg;\n            case '8':\n                if(id === 800 || id === 801) return sunnyImg;\n                if(id === 802 || id === 803) return cloudyImg;\n                return coveredImg;\n            default: return defaultImg;\n        }\n\n    }\n\n    const degreesToCardinal = (deg) => {\n        const cardinals = [\n            message.north,\n            message.northEast,\n            message.east,\n            message.southEast,\n            message.south,\n            message.southWest,\n            message.west,\n            message.northwest,\n            message.north\n        ];\n\n        return cardinals[parseFloat((deg % 360) / 45).toFixed(0)];\n    }\n\n    const styles = {\n        heightSmall: {\n            height: '15px'\n        },\n        heightMedium: {\n            height: '28px'\n        },\n        temp: {\n            fontSize: '42pt',\n            fontWeight: 'bold',\n            verticalAlign: 'middle'\n        },\n        middle: {\n            verticalAlign: 'middle'\n        },\n        capitalize: {\n            textTransform: 'capitalize',\n            fontWeight: 'bold'\n        },\n        component: {\n            background: 'rgba(245,245,245, .75)',\n            padding: '60px 0 60px 0',\n            borderRadius : '5px'\n        },\n        main: {\n            width: '100%',\n            height: '100%',\n            align: 'center',\n            textAlign: 'center',\n            backgroundImage: image ? `url(${image})` : '',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundSize: 'cover',\n        },\n        fullHeight: {\n            height: '100%'\n        }\n    }\n\n    return (\n        <div style={styles.main}>\n            <Card style={styles.main}>\n                <CardContent style={styles.fullHeight}>\n                    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\"\n                          style={styles.fullHeight}>\n                        <Grid item xs={1} sm={3} md={4} xl={5}/>\n                        <Grid item xs={10} sm={6} md={4} xl={2}>\n                            <CardActionArea onClick={props.clicked}>\n                            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" style={styles.component}>\n                                <Grid item>\n                                    <Grid container spacing={2}>\n                                        <Grid item>\n                                            <Typography variant='h4' style={styles.temp}>\n                                                <img alt=\"\" src={`https://openweathermap.org/img/w/${weather.weather[0].icon}.png`}/>\n                                                {(parseFloat(weather.main.temp).toFixed(0))+\"°C\"}\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item>\n                                            <Grid container direction=\"column\" style={{marginTop: '10px'}}>\n                                                <Grid item style={{fontSize: '16pt'}}>\n                                                    {(parseFloat(weather.main.temp_max).toFixed(0))+'°'}\n                                                </Grid>\n                                                <Grid item style={{fontSize: '16pt'}}>\n                                                    {(parseFloat(weather.main.temp_min).toFixed(0))+'°'}\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n\n                                <Grid item>\n                                    <Typography variant=\"h6\" gutterBottom style={styles.capitalize}>\n                                        {weather.weather[0].description}\n                                    </Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Typography variant=\"body1\" gutterBottom>\n                                        {message.humidity}: <strong>{parseFloat(weather.main.humidity).toFixed(0)+\"%\"}</strong>\n                                    </Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Typography variant=\"body1\" gutterBottom>\n                                        {message.wind}: <strong>{parseFloat(weather.wind.speed).toFixed(0)+\" km/h \"+degreesToCardinal(weather.wind.deg)}</strong>\n                                    </Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Typography color=\"textSecondary\" gutterBottom>{weather.name}</Typography>\n                                </Grid>\n                            </Grid>\n                            </CardActionArea>\n                        </Grid>\n                        <Grid item xs={1} sm={3} md={4} xl={5}/>\n                    </Grid>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\n\n\nexport default WeatherComponent;\n","import React from 'react'\nimport message from \"../localization/weather/CurrentWeatherLocal\";\nimport Api from \"../api/Api\";\nimport WeatherComponent from \"./WeatherComponent\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\n\nconst Weather = (props) => {\n\n    const [weather, setWeather] = React.useState(null);\n    const [error, setError] = React.useState(null);\n    const [permission, setPermission] = React.useState('');\n\n    const Permission = {\n        PROMPT: 'prompt',\n        DENIED: 'denied',\n        GRANTED: 'granted'\n    }\n\n    const handlePermission = () => {\n        navigator.permissions.query({name:'geolocation'}).then(result => {\n            setPermission(result.state);\n            result.onchange = () => setPermission(result.state);\n        });\n    }\n\n    const populateByLocation = () => {\n        if(!!(navigator.geolocation)) {\n            navigator.geolocation.getCurrentPosition((position) =>\n                getWeatherByCoords(position.coords.latitude, position.coords.longitude))\n        }\n    }\n\n    const populateByCity = () => {\n        Api.getIpLocation().then(location => {\n            getWeatherByCity(location.city, location.country_code)\n        }).catch(e => {\n            if(permission !== Permission.PROMPT) setError(message.geolocationDisabled)\n        });\n    }\n\n    React.useEffect(() => {\n        handlePermission();\n        populate();\n    }, []);\n\n    React.useEffect(() => {\n        populate();\n    }, [permission]);\n\n    const populate = () => {\n        setError(null);\n\n        populateByLocation();\n\n        if(permission === Permission.DENIED || permission === Permission.PROMPT || !navigator.geolocation){\n            populateByCity();\n        }\n    }\n\n    const getWeatherByCoords = (lat, lon) => {\n        Api.getWeatherByCoords(lat, lon, message.getLanguage())\n            .then((weather) => setWeather(weather))\n            .catch((error) => {\n                setError(error.message);\n                console.log(error);\n            });\n    }\n\n    const getWeatherByCity = (city, countryCode) => {\n        Api.getWeatherByCity(city, countryCode, message.getLanguage())\n            .then((weather) => setWeather(weather))\n            .catch((error) => {\n                setError(error.message);\n                console.log(error);\n            });\n    }\n\n    return (\n        <div style={{height: '100%', width: '100%'}}>\n            {error && <Alert severity=\"error\">{error}</Alert>}\n            {!weather && permission === Permission.PROMPT && <Alert severity=\"info\"><strong>{message.important}</strong>{\" \"+message.geolocationRequest}</Alert>}\n            {weather ? <WeatherComponent\n                    clicked={populate}\n                    weather={weather}/> :\n                permission !== Permission.DENIED && <LinearProgress />}\n        </div>\n    )\n}\n\nexport default Weather;\n","import React from 'react';\nimport './App.css';\nimport Weather from \"./weather/Weather\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}