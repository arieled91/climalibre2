{"version":3,"sources":["assets/cloudy-sky-min.jpg","assets/cloudy-sky.jpg","assets/drizzle-min.jpg","assets/drizzle-night-min.jpg","assets/fog-min.jpg","assets/rainy-day-min.jpg","assets/snow-min.jpg","assets/storm-min.jpg","assets/sunny-min.jpg","assets/covered-min.jpg","assets/clear-sky-night-min.jpg","assets/cloudy-sky-night-min.jpg","assets/fog-night-min.jpg","assets/snow-night-min.jpg","assets/covered-night-min.jpg","assets/rainy-night-min.jpg","assets/drizzle.jpg","assets/drizzle-night.jpg","assets/fog.jpg","assets/rainy-day.jpg","assets/snow.jpg","assets/storm.jpg","assets/sunny.jpg","assets/covered.jpg","assets/clear-sky-night.jpg","assets/cloudy-sky-night.jpg","assets/fog-night.jpg","assets/snow-night.jpg","assets/covered-night.jpg","assets/rainy-night.jpg","localization/weather/CurrentWeatherLocal.js","api/Api.js","weather/WeatherComponent.js","weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","message","LocalizedStrings","en","loading","humidity","feelsLike","wind","important","geolocationRequest","geolocationDisabled","north","northEast","east","southEast","south","southWest","west","northwest","station","es","Api","Axios","get","this","IP_LOCATION","then","response","data","zipCode","countryCode","language","WEATHER","params","baseParams","q","lang","latitude","longitude","lat","lon","FORECAST","OWM_API_ID","URL","appid","units","WeatherComponent","props","weather","React","useState","min","full","image","setImage","imageLoaded","setImageLoaded","todayForecast","setTodayForecast","isDayTime","useCallback","sunrise","sys","sunset","now","Date","getTime","calculateImage","id","code","day","stormImg","stormImgMin","drizzleImg","drizzleImgMin","drizzleNightImg","drizzleNightImgMin","rainyImg","rainyImgMin","rainyNightImg","rainyNightImgMin","snowImg","snowImgMin","snowNightImg","snowNightImgMin","fogImg","fogImgMin","fogNightImg","fogNightImgMin","sunnyImg","sunnyImgMin","clearSkyNightImg","clearSkyNightImgMin","cloudyImg","cloudyImgMin","cloudySkyNightImg","cloudySkyNightImgMin","coveredImg","coveredImgMin","coveredNightImg","coveredNightImgMin","useEffect","forecast","list","filter","w","dt","date","setHours","setDate","getDate","tomorrow","deg","fix","temp","digits","parseFloat","toFixed","className","src","alt","onLoad","Grid","container","direction","justify","alignItems","item","Typography","variant","style","fontSize","color","name","gutterBottom","marginBottom","description","spacing","verticalAlign","icon","main","temp_max","temp_min","feels_like","speed","map","key","display","textAlign","marginTop","width","position","bottom","time","stringTime","toLocaleTimeString","hour","minute","hour12","charAt","substr","getLocalTime","Weather","setWeather","setForecast","error","setError","permission","setPermission","Permission","populateByLocation","navigator","geolocation","getCurrentPosition","getWeatherByCoords","coords","permissions","query","result","state","onchange","populateByCity","getIpLocation","location","getWeatherByCity","city","country_code","catch","e","console","log","populate","getLanguage","getForecastByCoords","onFocus","window","addEventListener","removeEventListener","height","Alert","severity","LinearProgress","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc91c01c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloudy-sky-min.1effaf46.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-sky.d56cf3ed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle-min.d9ca9dd9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle-night-min.382ad09b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fog-min.585687a6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-day-min.0408d453.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow-min.813d8ba8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm-min.88eb52fb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunny-min.a647c593.jpg\";","module.exports = __webpack_public_path__ + \"static/media/covered-min.20c0d102.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clear-sky-night-min.38b1b49c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-sky-night-min.769c0453.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fog-night-min.e6e165b4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow-night-min.129bfaad.jpg\";","module.exports = __webpack_public_path__ + \"static/media/covered-night-min.f0782ad0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-night-min.927a1ae9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle.c6679dc6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle-night.0f053312.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fog.cac8ace4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-day.1e31577d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow.272d8b9d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm.a1438dce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunny.5f43ef67.jpg\";","module.exports = __webpack_public_path__ + \"static/media/covered.99c596e5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clear-sky-night.f323ee0a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-sky-night.84d67e51.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fog-night.b721e3af.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow-night.acc734b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/covered-night.a51160fd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-night.26eee4b5.jpg\";","import LocalizedStrings from 'react-localization';\n\nconst message = new LocalizedStrings({\n  en:{\n    loading : \"Loading...\",\n    humidity: \"Humidity\",\n    feelsLike: \"Feels Like\",\n    wind:\"Wind\",\n    important : \"Important!\",\n    geolocationRequest : \"Grant location permission in your device to continue\",\n    geolocationDisabled : \"Geolocation is disabled in your device\",\n    //cardinals\n    north:\"North\",\n    northEast: \"Northeast\",\n    east: \"East\",\n    southEast: \"Southeast\",\n    south:\"South\",\n    southWest:\"Southwest\",\n    west:\"West\",\n    northwest:\"Northwest\",\n    station:\"Station\"\n  },\n  es: {\n  \tloading : \"Cargando...\",\n    humidity:\"Humedad\",\n    feelsLike:\"Sensación térmica\",\n    wind:\"Viento\",\n    important : \"¡Importante!\",\n    geolocationRequest : \"Para continuar conceda permisos de ubicación.\",\n    geolocationDisabled : \"La geolocalización se encuentra deshabilitada en su dispositivo\",\n    //cardinals\n    north:\"Norte\",\n    northEast: \"Noreste\",\n    east: \"Este\",\n    southEast: \"Sudeste\",\n    south:\"Sur\",\n    southWest:\"Sudoeste\",\n    west:\"Oeste\",\n    northwest:\"Noroeste\",\n    station:\"Estación\"\n  }\n});\n\nexport default message\n","import Axios from 'axios';\n\nexport default class Api {\n\n\tstatic OWM_API_ID = \"bb08096af050f2bd4c2b401249b14e27\";\n\tstatic URL = \"https://api.openweathermap.org/data/2.5\";\n\tstatic WEATHER = this.URL+\"/weather\";\n\tstatic FORECAST = this.URL+\"/forecast\";\n\tstatic IP_LOCATION = \"https://ipapi.co/json\"\n\n\tstatic baseParams = {\n\t\tappid: this.OWM_API_ID,\n\t\tunits: \"metric\",\n\t}\n\n\tstatic async getIpLocation() {\n\t\treturn await Axios.get(this.IP_LOCATION)\n\t\t\t.then(response => response.data);\n\t}\n\n\tstatic async getWeatherByCity(zipCode, countryCode, language) {\n\t\treturn await Axios.get(this.WEATHER, {\n\t\t\tparams: {\n\t\t\t\t...this.baseParams,\n\t\t\t\tq: `${zipCode},${countryCode}`,\n\t\t\t\tlang: language\n\t\t\t}\n\t\t}).then(response => response.data);\n\t}\n\n\tstatic async getWeatherByCoords(latitude, longitude, language) {\n\t\treturn await Axios.get(this.WEATHER, {\n\t\t\tparams: {\n\t\t\t\t...this.baseParams,\n\t\t\t\tlat: latitude,\n\t\t\t\tlon: longitude,\n\t\t\t\tlang: language\n\t\t\t}\n\t\t}).then(response => response.data);\n\t}\n\n\tstatic async getForecastByCity(zipCode, countryCode, language) {\n\t\treturn await Axios.get(this.FORECAST, {\n\t\t\tparams: {\n\t\t\t\t...this.baseParams,\n\t\t\t\tq: `${zipCode},${countryCode}`,\n\t\t\t\tlang: language\n\t\t\t}\n\t\t}).then(response => response.data);\n\t}\n\n\tstatic async getForecastByCoords(latitude, longitude, language) {\n\t\treturn await Axios.get(this.FORECAST, {\n\t\t\tparams: {\n\t\t\t\t...this.baseParams,\n\t\t\t\tlat: latitude,\n\t\t\t\tlon: longitude,\n\t\t\t\tlang: language\n\t\t\t}\n\t\t}).then(response => response.data);\n\t}\n}\n","import React, {Fragment} from 'react'\nimport message from \"../localization/weather/CurrentWeatherLocal\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport cloudyImgMin from \"./../assets/cloudy-sky-min.jpg\";\nimport drizzleImgMin from \"./../assets/drizzle-min.jpg\";\nimport drizzleNightImgMin from \"./../assets/drizzle-night-min.jpg\";\nimport fogImgMin from \"./../assets/fog-min.jpg\";\nimport rainyImgMin from \"./../assets/rainy-day-min.jpg\";\nimport snowImgMin from \"./../assets/snow-min.jpg\";\nimport stormImgMin from \"./../assets/storm-min.jpg\";\nimport sunnyImgMin from \"./../assets/sunny-min.jpg\";\nimport coveredImgMin from \"./../assets/covered-min.jpg\";\nimport clearSkyNightImgMin from \"./../assets/clear-sky-night-min.jpg\";\nimport cloudySkyNightImgMin from \"./../assets/cloudy-sky-night-min.jpg\";\nimport fogNightImgMin from \"./../assets/fog-night-min.jpg\";\nimport snowNightImgMin from \"./../assets/snow-night-min.jpg\";\nimport coveredNightImgMin from \"./../assets/covered-night-min.jpg\";\nimport rainyNightImgMin from \"./../assets/rainy-night-min.jpg\";\nimport cloudyImg from \"./../assets/cloudy-sky.jpg\";\nimport drizzleImg from \"./../assets/drizzle.jpg\";\nimport drizzleNightImg from \"./../assets/drizzle-night.jpg\";\nimport fogImg from \"./../assets/fog.jpg\";\nimport rainyImg from \"./../assets/rainy-day.jpg\";\nimport snowImg from \"./../assets/snow.jpg\";\nimport stormImg from \"./../assets/storm.jpg\";\nimport sunnyImg from \".././assets/sunny.jpg\";\nimport coveredImg from \"./../assets/covered.jpg\";\nimport clearSkyNightImg from \"./../assets/clear-sky-night.jpg\";\nimport cloudySkyNightImg from \"./../assets/cloudy-sky-night.jpg\";\nimport fogNightImg from \"./../assets/fog-night.jpg\";\nimport snowNightImg from \"./../assets/snow-night.jpg\";\nimport coveredNightImg from \"./../assets/covered-night.jpg\";\nimport rainyNightImg from \"./../assets/rainy-night.jpg\";\n\nimport './WeatherComponent.css';\n\nconst WeatherComponent = (props) => {\n    const weather = props.weather;\n\n    const [image, setImage] = React.useState({min: '', full: ''});\n    const [imageLoaded, setImageLoaded] = React.useState(false);\n    const [todayForecast, setTodayForecast] = React.useState([]);\n\n    const isDayTime = React.useCallback(() => {\n        const sunrise = weather.sys.sunrise * 1000;\n        const sunset = weather.sys.sunset * 1000;\n        const now = new Date().getTime();\n        return now > sunrise && now < sunset;\n    }, [weather])\n\n    const calculateImage = React.useCallback(() => {\n        if (!weather) return null;\n        const id = weather.weather[0].id;\n        const code = ('' + id)[0];\n        const day = isDayTime();\n\n        switch (code) {\n            case '2':\n                return {full: stormImg, min: stormImgMin};\n            case '3':\n                return day ? {full: drizzleImg, min: drizzleImgMin} : {full: drizzleNightImg, min: drizzleNightImgMin};\n            case '5':\n                return day ? {full: rainyImg, min: rainyImgMin} : {full: rainyNightImg, min: rainyNightImgMin};\n            case '6':\n                return day ? {full: snowImg, min: snowImgMin} : {full: snowNightImg, min: snowNightImgMin};\n            case '7':\n                return day ? {full: fogImg, min: fogImgMin} : {full: fogNightImg, min: fogNightImgMin};\n            case '8':\n                if (id === 800 || id === 801) return day ? {full: sunnyImg, min: sunnyImgMin} : {\n                    full: clearSkyNightImg,\n                    min: clearSkyNightImgMin\n                };\n                if (id === 802 || id === 803) return day ? {\n                    full: cloudyImg,\n                    min: cloudyImgMin\n                } : {full: cloudySkyNightImg, min: cloudySkyNightImgMin};\n                return day ? {full: coveredImg, min: coveredImgMin} : {full: coveredNightImg, min: coveredNightImgMin};\n            default:\n                return {full: cloudyImg, min: cloudyImgMin};\n        }\n\n    }, [isDayTime, weather])\n\n    React.useEffect(() => {\n        setImage(calculateImage());\n    }, [calculateImage, props.weather])\n\n\n    const degreesToCardinal = (deg) => {\n        const cardinals = [\n            message.north,\n            message.northEast,\n            message.east,\n            message.southEast,\n            message.south,\n            message.southWest,\n            message.west,\n            message.northwest,\n            message.north\n        ];\n\n        return cardinals[parseFloat((deg % 360) / 45).toFixed(0)];\n    }\n\n    const tomorrow = () => {\n        let date = new Date()\n        date.setHours(7, 0, 0, 0);\n        date.setDate(date.getDate() + 1)\n        return date;\n    }\n\n    React.useEffect(() => {\n        if (props.forecast) {\n            setTodayForecast(props.forecast.list.filter(w => w.dt * 1000 < tomorrow()));//.slice(0, 3));\n        }\n    }, [props.forecast])\n\n    const fix = (temp, digits = 0) => {\n        return parseFloat(temp).toFixed(digits);\n    }\n\n    const getLocalTime = (time) => {\n        const stringTime = new Date(time).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit', hour12: false});\n        return stringTime.charAt(0) === '0' ? stringTime.substr(1) : stringTime;\n    }\n\n    const styles = {\n        heightSmall: {\n            height: '15px'\n        },\n        heightMedium: {\n            height: '28px'\n        },\n        temp: {\n            fontSize: '55pt',\n            verticalAlign: 'middle'\n        },\n        middle: {\n            verticalAlign: 'middle'\n        }\n    }\n\n    return (\n        <Fragment>\n            <div>\n                {/*{!imageLoaded && <img className=\"image thumb\" src={image.min} alt=''/>}*/}\n                {!imageLoaded && <img className=\"image thumb\" src={image.min} alt=''/>}\n                <img className=\"image full\" src={image.full} alt='' onLoad={() => setImageLoaded(true)}/>\n            </div>\n            <div className=\"weather-component main-component\">\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" className=\"fullHeight\">\n                    <Grid item>\n                        <Typography variant=\"caption\" style={{\n                            fontSize: '10pt',\n                            color: 'rgba(255,255,255,0.69)'\n                        }}>{weather.name}</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"h5\" gutterBottom className=\"capitalize\" style={{marginBottom: '-5px'}}>\n                            {weather.weather[0].description}\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n                            <Grid item>\n                                <Typography variant='h4' style={styles.temp}>\n                                    <img alt=\"\"\n                                         src={`https://openweathermap.org/img/w/${weather.weather[0].icon}.png`}/>\n                                    {fix(weather.main.temp) + \"°C\"}\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n                                    <Grid item style={{fontSize: '20pt'}}>\n                                        {fix(weather.main.temp_max) + '°'}\n                                    </Grid>\n                                    <Grid item style={{fontSize: '20pt'}}>\n                                        {fix(weather.main.temp_min) + '°'}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Typography variant=\"body1\" gutterBottom>\n                            {message.feelsLike}: <strong>{fix(weather.main.feels_like) + \"º\"}</strong>\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"body1\" gutterBottom>\n                            {message.humidity}: <strong>{fix(weather.main.humidity) + \"%\"}</strong>\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"body1\" gutterBottom>\n                            {message.wind}: <strong>{fix(weather.wind.speed) + \" km/h \" + degreesToCardinal(weather.wind.deg)}</strong>\n                        </Typography>\n                    </Grid>\n                </Grid>\n                <div className=\"hide-scrollbar extra-shadow forecastContainer\">\n                    {todayForecast.map(forecast => (\n                        <div key={forecast.dt} className=\"forecast-content\">\n                            <div className=\"capitalize forecast-title\">\n                                {forecast.weather[0].description}\n                            </div>\n                            <div style={{display:'inline-block', textAlign: 'center'}}>\n                                <img style={{marginBottom: '-10px', marginTop: '-5px', width: '35px'}}\n                                     alt=\"\" src={`https://openweathermap.org/img/w/${forecast.weather[0].icon}.png`}/>\n                                <span style={{\n                                    position: \"relative\",\n                                    bottom: '4px'\n                                }}><strong>{fix(forecast.main.temp) + '°'}</strong></span>\n                            </div>\n                            <div>\n                                <strong style={{fontSize: '9pt'}}>{getLocalTime(forecast.dt * 1000)}</strong>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\n\nexport default WeatherComponent;\n","import React from 'react'\nimport message from \"../localization/weather/CurrentWeatherLocal\";\nimport Api from \"../api/Api\";\nimport WeatherComponent from \"./WeatherComponent\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\n\nconst Weather = (props) => {\n\n    const [weather, setWeather] = React.useState(null);\n    const [forecast, setForecast] = React.useState(null);\n    const [error, setError] = React.useState(null);\n    const [permission, setPermission] = React.useState('');\n\n    const Permission = {\n        PROMPT: 'prompt',\n        DENIED: 'denied',\n        GRANTED: 'granted'\n    }\n\n    const handlePermission = () => {\n        navigator.permissions.query({name:'geolocation'}).then(result => {\n            setPermission(result.state);\n            result.onchange = () => setPermission(result.state);\n        });\n    }\n\n    const populateByLocation = React.useCallback(() => {\n        if(!!(navigator.geolocation)) {\n            navigator.geolocation.getCurrentPosition((position) =>\n                getWeatherByCoords(position.coords.latitude, position.coords.longitude))\n        }\n    }, []);\n\n    React.useEffect(() => {\n        handlePermission();\n    }, []);\n\n    const populateByCity = React.useCallback(() => {\n        Api.getIpLocation().then(location => {\n            getWeatherByCity(location.city, location.country_code)\n        }).catch(e => {\n            if(permission !== Permission.PROMPT) {\n                setError(message.geolocationDisabled);\n                console.log(e);\n            }\n        });\n    }, [permission, Permission.PROMPT]);\n\n    const populate = React.useCallback(() => {\n        setError(null);\n\n        populateByLocation();\n\n        if(permission === Permission.DENIED || permission === Permission.PROMPT || !navigator.geolocation){\n            populateByCity();\n        }\n    }, [populateByLocation, populateByCity, permission, Permission.DENIED, Permission.PROMPT]);\n\n    React.useEffect(() => {\n        if(permission!=='') populate();\n    }, [populate, permission]);\n\n\n\n    const getWeatherByCoords = (lat, lon) => {\n        Api.getWeatherByCoords(lat, lon, message.getLanguage())\n            .then((weather) => setWeather(weather))\n            .catch((error) => {\n                setError(error.message);\n                console.log(error);\n            });\n\n        Api.getForecastByCoords(lat, lon, message.getLanguage())\n            .then((forecast) => {\n                setForecast(forecast);\n            })\n            .catch((error) => {\n                setError(error.message);\n                console.log(error);\n            });\n    }\n\n    const getWeatherByCity = (city, countryCode) => {\n        Api.getWeatherByCity(city, countryCode, message.getLanguage())\n            .then((weather) => setWeather(weather))\n            .catch((error) => {\n                setError(error.message);\n                console.log(error);\n            });\n    }\n\n\n    const onFocus = () => {\n        populate();\n    };\n\n    React.useEffect(() => {\n        window.addEventListener('focus', onFocus);\n\n        return () => {\n            window.removeEventListener('focus', onFocus);\n        };\n    });\n\n    return (\n        <div style={{height: '100%', width: '100%'}}>\n            {error && <Alert severity=\"error\">{error}</Alert>}\n            {!weather && permission === Permission.PROMPT && <Alert severity=\"info\"><strong>{message.important}</strong>{\" \"+message.geolocationRequest}</Alert>}\n            {weather ? <WeatherComponent\n                    weather={weather}\n                    forecast={forecast}\n                />\n                    :\n                permission !== Permission.DENIED && <LinearProgress />}\n        </div>\n    )\n}\n\nexport default Weather;\n","import React from 'react';\nimport './App.css';\nimport Weather from \"./weather/Weather\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}